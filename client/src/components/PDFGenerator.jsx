import React from 'react';
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';
import PropTypes from 'prop-types';

const styles = StyleSheet.create({
  page: {
    padding: 25,
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#430F58',
    marginBottom: 25,
  },
  heading: {
    fontsize: 22,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#430F58',
    marginBottom: 1,
  },
  subheader: {
    fontSize: 16,
    fontWeight: '600',
    color: '#6643B5',
    marginBottom: 15,
  },
  body: {
    fontSize: 13,
    lineHeight: 1.6,
    color: '#000',
    marginBottom: 15,
    textAlign: 'justify',
  },
  birthChartContainer: {
    borderWidth: 1,
    borderColor: '#000',
    width: 200,
    height: 200,
    margin: 'auto',
    backgroundColor: '#F9F9F9',
  },
  row: {
    flexDirection: 'row',
    flex: 1,
  },
  cell: {
    flex: 1,
    borderWidth: 0.5,
    borderColor: '#000',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#D5DEF5',
  },
  cellText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#6643B5',
  },
  separator: {
    borderTopWidth: 1,
    borderTopColor: '#430F58',
    marginVertical: 20,
  },
  messageList: {
    marginTop: 10,
    paddingLeft: 15,
  },
  listItemContainer: {
    flexDirection: 'row',
    marginBottom: 5,
  },
  bullet: {
    fontSize: 12,
    color: '#000',
    marginRight: 8,
  },
  listItem: {
    fontSize: 12,
    lineHeight: 1.5,
    color: '#000',
  },
  footer: {
    fontSize: 11,
    color: '#512DA8',
    textAlign: 'center',
    marginTop: 40,
  },
});

const PDFGenerator = ({
  birthChart,
  lifePathNumber,
  name,
  dob,
  birthChartMessages,
  lifePathMessage,
}) => {
  const renderGrid = () => {
    const chartRows = [
      [birthChart[3] || '', birthChart[6] || '', birthChart[9] || ''],
      [birthChart[2] || '', birthChart[5] || '', birthChart[8] || ''],
      [birthChart[1] || '', birthChart[4] || '', birthChart[7] || ''],
    ];

    return (
      <View style={styles.birthChartContainer}>
        {chartRows.map((row, rowIndex) => (
          <View key={`row-${rowIndex}`} style={styles.row}>
            {row.map((cell, colIndex) => (
              <View key={`cell-${rowIndex}-${colIndex}`} style={styles.cell}>
                <Text style={styles.cellText}>{cell}</Text>
              </View>
            ))}
          </View>
        ))}
      </View>
    );
  };

  return (
    <PDFDownloadLink
      document={
        <Document>
          <Page style={styles.page}>
            <Text style={styles.header}>Numerology Report</Text>

            <Text style={styles.subheader}>Name: {name}</Text>
            <Text style={styles.subheader}>Date of Birth: {dob}</Text>
            <Text style={styles.subheader}>Ruling Number: {lifePathNumber}</Text>

            {lifePathMessage && (
              <>
                <Text style={styles.subheader}>About your Ruling Number,</Text>
                <Text style={styles.body}>{lifePathMessage}</Text>
              </>
            )}

            <View style={styles.separator} />

            <Text style={styles.heading}>Birth Chart</Text>
            {renderGrid()}

            <Text style={styles.subheader}>The meaning of your unique birth chart is,</Text>
            {birthChartMessages && birthChartMessages.length > 0 ? (
              <View style={styles.messageList}>
                {birthChartMessages.map((message, index) => (
                  <View key={`message-${index}`} style={styles.listItemContainer}>
                    <Text style={styles.bullet}>â€¢</Text>
                    <Text style={styles.listItem}>{message}</Text>
                  </View>
                ))}
              </View>
            ) : (
              <Text style={styles.body}>No messages available.</Text>
            )}

            <Text style={styles.footer}>Numerology Report generated by {name}</Text>
          </Page>
        </Document>
      }
      fileName={`${name}_Numerology_Report.pdf`}
      style={{
        color: '#FFD700',
        fontWeight: 'bold',
        fontSize: 18,
        cursor: 'pointer',
      }}
    >
      {({ loading }) => (loading ? 'Loading document...' : 'Download PDF')}
    </PDFDownloadLink>
  );
};

PDFGenerator.propTypes = {
  birthChart: PropTypes.array.isRequired,
  lifePathNumber: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  name: PropTypes.string.isRequired,
  dob: PropTypes.string.isRequired,
  birthChartMessages: PropTypes.array,
  lifePathMessage: PropTypes.string,
};

export default PDFGenerator;
